class Solution {
public:
    void sortColors(vector<int>& nums) {
        int count1=0;
        int count2=0;
        int count3=0;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==0)
                count1++;
            if(nums[i]==1)
                count2++;
            if(nums[i]==2)
                count3++;
        }
        for(int i=0;i<nums.size();i++)
        {
            if(count1!=0)
            {
                nums[i]=0;
                count1--;
            }
            else if(count2!=0)
            {
                nums[i]=1;
                count2--;
            }
            else
            {
                nums[i]=2;
                count3--;
            }
        }
        for(int i=0;i<nums.size();i++)
        {
            cout<<nums[i]<<" ";
        }
    }
};


    int len, i, j, k;
    if (n==0) {
        return 0;
    }
    vector<int> prefixSum(n + 1, 0);
 
    for (int i = 1; i <= n; i++) {
        prefixSum[i] = prefixSum[i - 1]+ numbers[i - 1];
    }

    vector<vector<int> > dp(n + 1,vector<int>(n + 1));
 
    for (int i = 1; i <= n; i++) {
        dp[i][i] = 0;
    }
 
    for (len = 2; len <= n; len++) {
 
        for (i = 1; i <= n - len + 1; i++) {
            j = i + len - 1;
            int sum = prefixSum[j]- prefixSum[i - 1];
            dp[i][j] = INT_MAX;
            for (k = i; k < j; k++) {
                dp[i][j]= min(dp[i][j],dp[i][k]+ dp[k + 1][j]+ sum);
            }
        }
    }
    return dp[1][n];
